学到的内容：

1、图片预加载

2、声音预加载、声音播放

3、gif动画播放









已解决的问题：

1、js中设置css的background-image时，路径不能包含中文！

问题描述：

我用的进度条插件，我先把该插件的图片放在“进度条/images”中，然后改写jquery.progressbar.js的图片路径为进度条/images/xxx，结果始终加载不起图片！！！！



解决方案：

将文件名“进度条”改为“progress”即可！！！




2、声音soundmanager加载失败！

解决方案：

引入swf文件夹，并设置soundManager.url = 'SoundManager/swf/';     //swf文件夹在所位置







3、记录与显示连接路径的算法改进（参考Freewind）

	原来的方法也可行，但是性能不行（记录连接路径的算法需要修改）。

        这个方法记录路径的算法是把每次经过的路径（td）记录下来（记录绑定该td的map数组和方向，
        如果为拐点，还要判断是哪种拐点（一共有8种拐点），再把拐点加入到记录中）保存到路径数组中，然后在显示时，
        把路径数组中的map数组（绑定td）的图片换成连线图片。

        这样做的效率很低，且需要判断拐点。


        因此我使用了改进的算法，即：

        记录x或者y方向的最小坐标（因为x方向的连线是从左边开始加的，y方向的连线是从上边开始加的）和该方向上的连线个数（此处个数要多加1个，这样就可以应对有拐点的情况了）。

        最多使用三个层来显示连线（有两个拐点的情况会使用三个层；一个拐点的情况使用两个层；没有拐点的情况使用一个层），
        一个层都放x方向的连线，一个层都放y方向的连线，另外一个层都放x或y方向的连线（即最多有两个x方向和一个y方向的层 或者
        一个x方向和两个y方向的层，这样即可显示所有情况的连线）

        层的显示方式见《连线显示层演示》！




4、绑定鼠标click事件有延迟，导致鼠标点快点后，可能不能选中方块。

问题描述：

我为表格的td绑定了click事件。如果快速边移动边点击td（相当于点击方块），有些方块可能点击不起。


原因：

这是因为mousedown => mouseup => click。因此一个点击事件，会在mouseup事件（即鼠标的键钮被释放弹起时）后触发。


解决方案：

改用mousedown事件！



5、连线提示时（指南针道具效果），方块提示框不能覆盖与连线图片重叠的部分。


/*两个div为提示方框，一个放横线，一个放竖线，还有一个用于两个拐点的情况，放横线或者竖线。

            此处要实现提示方框（设置border为红色）覆盖连线图片（因为连线图片会有半截在提示方框内），
            如果单纯的设置提示方框的z-index，不能覆盖。

            因为经我测试，比如有两个同级的层1和层2，它们都设置了position（为relative或者absolute，层1的left:0px,top:0px，层2的left:-10px, top:0px）、
            border(层1蓝色，层2红色)、z-index（层1为10，层2为20），则层2的边框能够覆盖层1的边框。
            如果层2加入了图片（如.html("<img src='Image/box/img001.bmp' />")），则层2的图片会显示到层1中（但是层1的边框仍然会覆盖层2的图片）！
            如果层1设置了背景色或者也加入了图片（如.html("<img src='Image/box/img002.bmp' />"），则层2的图片在层1中重叠的部分会被覆盖！

            所以基于上面的测试和分析，此处.clue设置z-index为10（连线图片的层没有设置z-index），.clue_img中放置图片（用于覆盖连线图片重叠的部分）。

            注意此处.clue中没有设置border，而是在.clue_border中设置。这是因为如果在.clue中设置border，则显示效果不好（.clue_img中的图片会被挤出去），
            所以在.clue_border中设置border，并设置其position:absolute和left:0，这样图片就不会被挤出去了（相当于加了个效果层，套到图片上）。
            */
            LianLianKan.clueLine.append($("<div></div><div></div><div></div><div class='clue'><span class='clue_img'></span><div class='clue_border'></div></div><div class='clue'><span class='clue_img'></span><div class='clue_border'></div></div>"));



6、解除绑定事件RemoveEvent不起作用！


原因：

AddEvent和RemoveEvent中的handler不是同一个handler。


MyEngine.js Event:

    /* 注意：不能写成：
    MyGameEngine.Event.AddEvent(document.getElementById("test_div"), "mousedown", MyGameEngine.Event.BindEvent(this, Handler));
    MyGameEngine.Event.RemoveEvent(document.getElementById("test_div"), "mousedown", MyGameEngine.Event.BindEvent(this, Handler));

    这样不能移除掉绑定的事件！因为MyGameEngine.Event.BindEvent(this, Handler)不是同一个函数！（因为BindEvent返回了一个匿名函数，这两个
    BindEvent返回的匿名函数不是同一个！）

    应该写为：
    this._Handle = MyGameEngine.Event.BindEvent(this, Handler);
    MyGameEngine.Event.AddEvent($("div"), "mousedown", _Handle);
    MyGameEngine.Event.RemoveEvent($("div"), "mousedown", _Handle);

    这样_Handle就是同一个函数了！
    */


7、ff下自定义地图 -> 表格有些单元格没有边框！border-collapse:collapse;在ff下有问题！

原因：

border-collapse:collapse;在ff下有问题！


解决方案：

改成：

#content table{
	/*border-collapse:collapse;*/
	background:#6b8bbb;
}

然后在table上设置cellpadding='0' cellspacing='0'：

var html = ["<table border='0' cellpadding='0' cellspacing='0'>"];




8、




未解决的问题：

1、如果写成“this.base = parent.prototype[name];”，则在使用this.base()调用父类同名方法时，父类同名方法的this指针是指向F的！（即指向子类，而不是指向父类！）		为什么？？？？


MyGameEngine.js:

/*此处如果写成“this.base = parent.prototype[name];”，则在使用this.base()调用父类同名方法时，
                            父类同名方法的this指针是指向F的！（即指向子类，而不是指向父类！）   为什么？？？？
                            如：
                            var Person = MyAbstract({
                            init: function (name) {
                            this.name = name;
                            },
                            Public: {
                            m: 1,
                            getEmployeeID: function () {
                            console.log(this.m);
                            }
                            }
                            }
                            });


                            var Employee = MyClass({
                            init: function (name) {
                            this.name = name;
                            },
                            Public: {
                            m: 100,
                            getEmployeeID: function () {
                            this.baseClass.getEmployeeID();
                            this.base();
                            }
                            }
                            });

                            var m = new Employee();
                            m.getEmployeeID();    //输出：1  100（）

                            分析：
                            
                            this.baseClass.getEmployeeID()的this指向Person，而this.base()的this指向Employee！

                            解决方案：

                            用apply修正this.base()中的this，使其指向父类。
                            */

                            //此处不用创建闭包了！因为外面已经创建了闭包，name已经被保存了！
                            this.base = function () {
                                //这个写法也可以！为什么不用apply修正this也行？？！
                                //parent.prototype[name](); 

                                //此处的arguments为base方法传入的形参
                                parent.prototype[name].apply(parent.prototype, arguments);
                            };






2、为什么“不能写成e.button = 2,会提示错误！”？？


MyEngine.js WrapEvent()：

switch (e.button) {
                                            case 0:
                                                //360浏览器（使用ie8内核）
                                                if (e.type === "mouseup") {
//                    不能写成e.button = 2,会提示错误！
                                                    e.mouseButton = 2;
                                                }
                                                else {
                                                    e.mouseButton = 0;
                                                }
                                                break;
                                            case 2:
                                            case 1:
                                            case 3:
                                            case 4:
                                            case 5:
                                            case 6:
                                            case 7:
                                                e.mouseButton = e.button;
                                                break;
                                            default:
                                                throw new Error("button值不能大于7！");
                                                break;
                                        }



为什么“不能写成e.button = 2,会提示错误！”？？




3、360下预加载声音出错！为什么？？？？





4、360下不能预加载link.cur图片！为什么？？？






5、ie下，拖动window控件窗体时，如果往下拖动过快（鼠标移动到iframe上面），则拖动停止。这个问题应该如何解决？

原因：

	ie下，拖动控件(Drag.js)为document绑定的mousemove，因此iframe没有绑定mousemove。


尝试的解决方案：

	为window.js的iframe绑定mousemove。

	未成功！！！（找到当前window.js窗体对应的iframe并绑定mousedown失败！）



6、




已解决但不清楚原因的问题


1、ff下，用setTimeout(func, 0)后，setTimeout里面的函数func可能仍然操作dom失败！

MyPaging.js _SetWidth():

setTimeout(function () {
                //                console.log(self._li.css("height"), self._li.find("span").css("height"), self._li.find("img").css("height"));

                //ff下self._li的宽度和高度可能还是为0（如在一个window控件中显示分页列表，并且该列表有图片），此时就直接设定。
                selectedDiv_width = self._li.width() == 0 ? self.config.width : self._li.width().toString();
                selectedDiv_height = self._li.height() == 0 ? self.config.height : self._li.height().toString();

                self._selectedDiv.css({ "width": self._li.width().toString() + "px", "height": self._li.height().toString() + "px" });
                //                console.log("li width = ", self._li.width().toString(), "width = ", self._selectedDiv.css("width"));
            }, 0);

解决方案：

直接设定值。




2、ie8预加载声音后会短暂播放音效，为什么？？

App.js -> Set() -> LianLianKan.Operate_Single = new Operate_Single(LianLianKan.UI_CommonMap) -> Init -> this._SetMap(map)造成的！！！


解决方案：

	LianLianKan.config.Music最后push一个空数组：["", ""]。




注意事项：

1、图片预加载的js中，要把imgs[i].onload写到imgs[i].src = c.images[i]的前面。



2、jquery对象不能用"=="或"==="判等，要转换为dom对象再判等。

MyGameEngine.js  GetToParentOffset()


3、css中图片路径url中的不区分大小写。

如：
.DOTA_MainMenu .click{
	color:#004E74; background:url(/image/dota/menubg.gif) no-repeat;
}

实际图片在Image文件的DOTA中。


4、jquery的css方法设置width和宽度时，要写成.css("width", "400px")，不能写成.css("width", "400")。



5、OOP框架的this.base的问题

Operate_Game.js   Operate_AI	GameOver():

/* 
            此处不用“this.base(type);”！
            因为上面调用“this.ClearTimer();”时，已经将base指向了ClearTimer
            （即“return parentClass.prototype[name].apply(parentClass.prototype, arguments);”中的name为“ClearTimer”而不是“GameOver”）
            。
            所以如果此处用“this.base(type);”，实际上是调用父类（Operate_Single）中的ClearTimer方法！
            */
            this.baseClass.GameOver(type);



6、创建控件时，如果直接调用方法，则返回的不是创建的控件本身了！
如：
page = new YYC.Paging({
                onlyText: true,
                onlyImg: false,
                rowCount: 5,
                rowNum: 2,
                width: 100,
                //            height: 50,
                show: 2,
                onClick: OnClick,
                items: items
            }).RenderTo("yyc_map");

此page不是YYC.Paging的实例！


page = new YYC.Paging({
                onlyText: true,
                onlyImg: false,
                rowCount: 5,
                rowNum: 2,
                width: 100,
                //            height: 50,
                show: 2,
                onClick: OnClick,
                items: items
            });
page.RenderTo("yyc_map");

此page才是YYC.Paging的实例！



7、数组DataSource_MapData的Clone与操作的问题。

SelectMap.html:

/*复原地图数据
                此处不能用：
                mapData = self.parent.DataSource_MapData;
                mapData = operate.Clone(copy_mapData);

                因为这样mapData并没有指向self.parent.DataSource_MapData，而是指向Clone方法返回的新数组！
                */
                self.parent.DataSource_MapData = operate.Clone(copy_mapData);
                mapData = self.parent.DataSource_MapData;


8、不要给js数组加入自定义属性，否则该数组可能会丢失某些数组扩展方法。

如：
var DataSource_MapData = [
new Map('All', '__1111________________11________________', 'System', 6),
new Map('Easy', '11___111_______________________________1__________________1111', 'YYC', 10),
new Map('Easy', '11___111_______________________________1__________________1111', 'YYC', 10),
new Map('Easy', '11___111_______________________________1__________________1111', 'YYC', 10),
new Map('Easy', '11___111_______________________________1__________________1111', 'YYC', 10),
new Map('Easy', '11___111_______________________________1__________________1111', 'YYC', 10)
];

DataSource_MapData.AddCustomMap =false;

则DataSource_MapData在某种情况会丢失某些数组扩展方法。



9、使用clearTimeout或clearInterval时，还要把计数器清0.

如：
             
   window.clearTimeout(this._timer_prop_stop);	//this._timer_prop_stop并不会清0
                this._timer_prop_stop = 0;	//手动清0



10、判断变量是否存在，用“if(xx === undefined)”判断，而不用“if(!xx)”来判断！

因为如果用“if(!xx)”来判断，则如果xx为空(null)或0、""、NaN，则该判断都可通过！！




11、用soundManager时，路径和id不能包含中文。



12、console.log("".split(",").length)，输出1 ！


13、因为apply的第二个参数如果为undefined或null，ie下会报错！


如：

func.apply(this, undefined);	//ie下保错

func.apply(this, null);	//ie下保错

func.apply(this, []);	//正确

func.call(this, undefined);	//正确

func.call(this, null);	//正确




14、计时序号会递加，但是ie下每次刷新浏览器后计时器序号会叠加，且最初的序号也不一定从1开始（可能比1大），也就是说ie下计时器序号的起始值可能很大；chrome和firefox计时器每次从1开始。因此要暴力清除计时器的话，在ie下要先获得第一个计时器的序号，然后再递加清除：

Operate_Boss.js __ClearTimer:


            for (i = LianLianKan.timer_firstIndex; i < LianLianKan.timer_firstIndex + 500; i++) {
                window.clearTimeout(i);
            }
            for (i = LianLianKan.timer_firstIndex; i < LianLianKan.timer_firstIndex + 500; i++) {
                window.clearInterval(i);
            }




15、



补充笔记：

1、clearTimeout只能清除一个setTimeout函数。

如下面代码：

<script type="text/javascript">
    var timer = null;
    timer = setTimeout(function () {
        alert("first!");
    }, 2000);
    timer = setTimeout(function () {
        alert("second!");
    }, 4000);
    clearTimeout(timer);
</script>

执行结果为：

first!

也就是说，clearTimeout只是把setTimeout(function () {
        alert("second!");
    }, 4000);
清除了，而第一个没有清除！



2、js构造函数中可以执行类的方法，这样在实例化时，就会执行该方法。

如
function PreLoadImg(images, onStep, onLoad) {
    this.Imgs = images || [];

    this.imgCount = this.Imgs.length;
    this.currentLoad = 0;
    this.timer = 0;

    //调用构造函数时，执行该函数
    this.LoadImg();
};

PreLoadImg为预加载图片类。




3、禁止复制，鼠标拖动选取

禁止鼠标拖 图片（ie7下无效）:

    <img src="xx.jpg" onmousedown="return false;" />


 禁止复制，鼠标拖动选取（兼容ie7、ie9）:





 <body ondragstart=window.event.returnValue=false oncontextmenu=window.event.returnValue=false onselectstart=event.returnValue=false>


禁止复制，鼠标拖动选取（兼容ie7、ie9、ff）:

onmousedown='if(window.event) window.event.preventDefault(); return false;'

或者

onmousedown='operate.PreventDefault();'


或者


body
    {
  	-moz-user-select:none;
    }


<body ondragstart="operate.PreventDefault(event);" oncontextmenu="operate.PreventDefault(event);" onselectstart="operate.PreventDefault(event);">


PreventDefault: function (_e) {
            var e = _e ? _e : window.event; //兼容ie和其它浏览器
            if (operate.Browser.ie) {
                e.returnValue = false;
            }
            else {
                e.preventDefault();
            }
        },



4、一个dom元素设置为绝对定位，则它的参照物为父元素中设置了position值且不是static的祖先元素，如果祖先元素都没有设置position，则参照物为最顶端（看起来就是以最上角为参考）



5、jQuery中的offset()方法获得的坐标是相对于文档的位置（即页面的左上角），而position()则是获取匹配元素中第一个元素的当前坐标，相对于offset parent的坐标。( offset parent指离该元素最近的而且被定位过的祖先元素 ) （即相对于设置过position的祖先元素）


6、横向排列的图片，如果不设置position，则如果总宽度大于外层（.lineX）的宽度，则会换行！



7、在一个事件中触发另一个事件：

$(LianLianKan.Map.table).find("td").click(Mousedown);
                $(LianLianKan.clueLine).find("div.clue").mousedown(function () {
                    var x = $(this).attr("x");
                    var y = $(this).attr("y");
                    //显示当前选中效果层
                    LianLianKan.select_div.css({ "left": x + "px", "top": y + "px" });

	            //触发$(LianLianKan.Map.table).find("td[x=" + x / WIDTH + "][y=" + y / HEIGHT + "]")的mousedown事件
		    //此处要保证x / WIDTH为整数！否则会触发多个td的mousedown事件
                    $(LianLianKan.Map.table).find("td[x=" + Math.round(x / WIDTH).toString() + "][y=" + Math.round(y / HEIGHT).toString() + "]").mousedown();
                });


8、javascript中，“\”号（除法）的结果可以为小数。

console.log(140 / 35);		//4

console.log(139 / 35);		//3.9714285...

console.log(139.9 / 35);	//3.99714285...




9、关于闭包的研究。

MyGameEngine.js:

/* 如果不传入Public[name]，而直接在自执行函数中调用Public[name]，如
                        F.prototype[name] = function () {
                        return function () {
                        prop.Public[name].apply(this, arguments);
                        };
                        } ();

                        或者写成：
                        F.prototype[name] = function () {
                        prop.Public[name].call(this, arguments);
                        };
                        
                        
                        这样的话，在创建实例时调用方法时，都会执行MyClass中的最后一个函数！见下例
                        
                        var Person = MyClass({
                        init: function (name) {
                        this.name = name;
                        },
                        getName: function () {
                        console.log("getName");
                        },
                        getEmployeeID: function ($private) {
                        console.log("Person getEmployeeID");
                        }
                        });
                        var m = new Person("name");     
                        m.getName();    //第一种和第二种写法此处会输出："Person getEmployeeID"
                

                        这样执行的原因是：

                        （引用自“深入理解JavaScript系列（16）：闭包（Closures）”）
                        同一个父上下文中创建的闭包是共用一个[[Scope]]属性的。也就是说，
                        某个闭包对其中[[Scope]]的变量做修改会影响到其他闭包对其变量的读取。
                        这就是说：所有的内部函数都共享同一个父作用域。

                        也就是说，function里面的name都是共用父作用域中的name！所以此处F.prototype[name]被激活的时候，
                        name都为最后一个值即"getEmployeeID"。
                        所以F原型上的方法都指向"getEmployeeID"

                        解决方案：

                        创建一个闭包来保存name的值。
                        */
                        F.prototype[name] = function (name) {
                            return function () {
                                return prop.Public[name].apply(this, arguments);     //执行fn并返回执行的结果
                            };
                        } (name);




10、caller与callee


caller
 返回一个对函数的引用，该函数调用了当前函数。
 
functionName.caller
 
functionName 对象是所执行函数的名称。
 
说明
 对于函数来说，caller 属性只有在函数执行时才有定义。 如果函数是由 Javascript 程序的顶层调用的，那么 caller 包含的就是 null 。
 下面的例子说明了 caller 属性的用法：
 


function callerDemo() {
    if ( arguments.caller) {
        var a= callerDemo.caller.arguments[0];
        alert(a);
    } else {
        alert("this is a top function");

    }
}
function handleCaller(a) {
    callerDemo();
}

handleCaller("123");		//"123"





callee
 
返回正被执行的 Function 对象，也就是所指定的 Function 对象的正文。
 
[function.]arguments.callee
 可选项 function 参数是当前正在执行的 Function 对象的名称。
 
说明
 
callee 属性的初始值就是正被执行的 Function 对象。
 
callee 属性是 arguments 对象的一个成员，它表示对函数对象本身的引用，这有利于匿名函数的递归或者保证函数的封装性，例如下边示例的递归计算1到n的自然数之和。而该属性仅当相关函数正在执行时才可用。还有需要注意的是callee拥有length属性，这个属性有时候用于验证还是比较好的。arguments.length是实参长度，arguments.callee.length是形参长度，由此可以判断调用时形参长度是否和实参长度一致。


11、图片水平居中、垂直居中。

设置图片的父级dom（如div）样式为：

display: table-cell;  

vertical-align:middle;  

text-align:center;  

12、如果ul设置了“display: table-cell;  vertical-align:middle;  text-align:center;”，则如果用jquery“.css()”设置ul的宽度，则ul中图片居中效果消失！

13、setTimeout延迟时间为0的详解

setTimeout可以把任务从某个队列中跳脱成为新队列


网上资料：

我们来看 1 和 2。如果你能看看源代码，会发现我们的任务很简单，就是给文档增加一个 input 文本框，并聚焦和选中。请现在分别点击一下，可以看到，1 并没有能够聚焦和选中，而 2 可以。它们之间的区别在于，在执行：

input.focus();
input.select();
时， 2 多了一个延迟时间为 0 的 setTimeout 的外围函数，即：

setTimeout(function(){
input.focus();
input.select();
}, 0);
    按照 JavaScript: The Definitive Guide 5th 的 14.1 所说：

    在实践中，setTimeout 会在其完成当前任何延宕事件的事件处理器的执行，以及完成文档当前状态更新后，告诉浏览器去启用 setTimeout 内注册的函数。

    其实，这是一个把需要执行的任务从队列中跳脱的技巧。回到前面的例子，JavaScript 引擎在执行 onkeypress 时，由于没有多线程的同步执行，不可能同时去处理刚创建元素的 focus 和 select 事件，由于这两个事件都不在队列中，在完成 onkeypress 后，JavaScript 引擎已经丢弃了这两个事件，正如你看到的例子 1 的情况。而在例子 2 中，由于setTimeout可以把任务从某个队列中跳脱成为新队列，因而能够得到期望的结果。



我的应用：

MyPaging.js

/* 获得每项(<li>)的宽度和高度。
                此处要放到setTimeout中，目的是把任务从某个队列中跳脱成为新队列。
                如果不放到setTimeout中,则this._li.width()和this._li.height()的值都为0！

                现有的 JavaScript 引擎是单线程处理任务的，
                它把任务放到队列中，不会同步去执行，必须在完成一个任务后才开始另外一个任务。

                所以我认为（不一定正确！）这是因为<li>中的内容是在js中动态加入的，
                此处调用this._li.width()时，<li>中还没有实际加入dom元素。
                所以需要重新开启一个线程（队列？），把调用this._li.width()和height()放到新线程中，
                这样就能正确获取了。
            */
            setTimeout(function () {
                self._selectedDiv.css({ "width": self._li.width().toString() + "px", "height": self._li.height().toString() + "px" });
            }, 0);



14、右击事件(contextmenu)

MapEdit.html _InitEvent():

//右击事件，用于阻止默认动作（阻止弹出菜单）
                    MyGameEngine.Event.AddEvent(this._table, "contextmenu", MyGameEngine.Event.BindEvent(this, this._OnContext));



15、jquery的html()方法能够加入html文本，例如：xx.html("<span>t</span><br/>")，则“<span>和<br>”会设置成dom节点。
如果用text(),如xx.text("<span>t</span><br/>")，则会加入“<span>t</span><br/>”字符串（“<span>和<br>”被当成字符串）。



16、



参考资料：

1、Freewind的连连看游戏。

2、连连看寻路算法：http://wenku.baidu.com/view/99d3d70016fc700abb68fce9.html











